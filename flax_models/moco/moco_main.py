# coding=utf-8
# Copyright 2020 The Google Research Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Copyright 2020 The Flax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Momentum Contrast for Unsupervised Visual Representation Learning."""

import ast

from absl import app
from absl import flags
from flax.training import lr_schedule
import tensorflow as tf

from flax_models.moco import moco_lib
from flax_models.moco import model_resnet

FLAGS = flags.FLAGS

flags.DEFINE_string(
    'model_dir', default=None, help=('Directory to store model data'))
flags.mark_flag_as_required('model_dir')

flags.DEFINE_integer(
    'batch_size', default=2048, help=('Batch size for training.'))

flags.DEFINE_integer(
    'eval_batch_size', default=8192, help=('Batch size for evaluation.'))

flags.DEFINE_integer(
    'num_moco_epochs', default=200, help=('Number of MoCo training epochs.'))

flags.DEFINE_integer(
    'num_clf_epochs',
    default=100,
    help=('Number of linear classifier training epochs.'))

flags.DEFINE_float(
    'moco_learning_rate',
    default=0.03,
    help=('The learning rate for the MoCo optimizer.'))

flags.DEFINE_float(
    'clf_learning_rate',
    default=30.0,
    help=('The learning rate for the classifier optimizer.'))

flags.DEFINE_float(
    'sgd_momentum', default=0.9, help=('SGD optimizer momentum.'))

flags.DEFINE_bool(
    'sgd_nesterov', default=True, help=('Use SGD Nesterov momentum.'))

flags.DEFINE_string(
    'lr_moco_sched_steps',
    default='[[120, 0.1], [160, 0.01]]',
    help=('MoCo learning rate schedule steps as a Python list; '
          '[[step1_epoch, step1_lr_scale], '
          '[step2_epoch, step2_lr_scale], ...].'))

flags.DEFINE_string(
    'lr_clf_sched_steps',
    default='[[60, 0.2], [75, 0.04], [90, 0.008]]',
    help=('Linear classifier learning rate schedule steps as a Python list; '
          '[[step1_epoch, step1_lr_scale], '
          '[step2_epoch, step2_lr_scale], ...].'))

flags.DEFINE_float(
    'lr_moco_sched_warmup',
    default=5.0,
    help=('The length of the linear learning rate ramp-up used at the start '
          'of MoCo training.'))

flags.DEFINE_float(
    'lr_clf_sched_warmup',
    default=0.0,
    help=('The length of the linear learning rate ramp-up used at the start '
          'of linear classifier training.'))

flags.DEFINE_float(
    'moco_l2_reg',
    default=0.0001,
    help=('The amount of L2-regularization to apply while training MoCo.'))

flags.DEFINE_float(
    'clf_l2_reg',
    default=0.0,
    help=('The amount of L2-regularization to apply while training linear '
          'classifier.'))

flags.DEFINE_string(
    'arch',
    default='resnet50',
    help=('Network architecture (resnet50, resnet101 or resnet152).'))

flags.DEFINE_float('moco_momentum', default=0.999, help=('MoCo momentum'))

flags.DEFINE_integer(
    'emb_size',
    default=128,
    help=('Size of embedding generated by MoCo network during training.'))

flags.DEFINE_float(
    'moco_temperature', default=0.07, help=('Softmax temperature.'))

flags.DEFINE_integer(
    'dictionary_size',
    default=65536,
    help=('Size of dictionary of keys used during MoCo training.'))

flags.DEFINE_integer(
    'rng',
    default=0,
    help=('Random seed for network initialization and training.'))


def main(argv):
  if len(argv) > 1:
    raise app.UsageError('Too many command-line arguments.')

  # Make sure tf does not allocate gpu memory.
  tf.config.experimental.set_visible_devices([], 'GPU')

  emb_size = FLAGS.emb_size

  if FLAGS.arch == 'resnet50':
    module = model_resnet.ResNet50.partial(num_outputs=emb_size)
    feature_size = 64 * 8 * 4
  elif FLAGS.arch == 'resnet101':
    module = model_resnet.ResNet101.partial(num_outputs=emb_size)
    feature_size = 64 * 8 * 4
  elif FLAGS.arch == 'resnet152':
    module = model_resnet.ResNet152.partial(num_outputs=emb_size)
    feature_size = 64 * 8 * 4
  else:
    raise ValueError

  if FLAGS.lr_moco_sched_steps:
    lr_moco_sched_steps = ast.literal_eval(FLAGS.lr_moco_sched_steps)
  else:
    lr_moco_sched_steps = [[120, 0.1], [160, 0.01]]

  if FLAGS.lr_clf_sched_steps:
    lr_clf_sched_steps = ast.literal_eval(FLAGS.lr_clf_sched_steps)
  else:
    lr_clf_sched_steps = [[60, 0.2], [75, 0.04], [90, 0.008]]

  def make_moco_lr_fun(base_lr, steps_per_epoch):
    return lr_schedule.create_stepped_learning_rate_schedule(
        base_lr,
        steps_per_epoch,
        lr_moco_sched_steps,
        warmup_length=FLAGS.lr_moco_sched_warmup)

  def make_clf_lr_fun(base_lr, steps_per_epoch):
    return lr_schedule.create_stepped_learning_rate_schedule(
        base_lr,
        steps_per_epoch,
        lr_clf_sched_steps,
        warmup_length=FLAGS.lr_clf_sched_warmup)

  moco_lib.train(
      module,
      model_dir=FLAGS.model_dir,
      batch_size=FLAGS.batch_size,
      eval_batch_size=FLAGS.eval_batch_size,
      num_moco_epochs=FLAGS.num_moco_epochs,
      num_clf_epochs=FLAGS.num_clf_epochs,
      moco_learning_rate=FLAGS.moco_learning_rate,
      clf_learning_rate=FLAGS.clf_learning_rate,
      sgd_momentum=FLAGS.sgd_momentum,
      sgd_nesterov=FLAGS.sgd_nesterov,
      make_moco_lr_fun=make_moco_lr_fun,
      make_clf_lr_fun=make_clf_lr_fun,
      moco_l2_reg=FLAGS.moco_l2_reg,
      clf_l2_reg=FLAGS.clf_l2_reg,
      feature_size=feature_size,
      moco_momentum=FLAGS.moco_momentum,
      emb_size=emb_size,
      moco_temperature=FLAGS.moco_temperature,
      dictionary_size=FLAGS.dictionary_size,
      run_seed=FLAGS.rng)


if __name__ == '__main__':
  app.run(main)
